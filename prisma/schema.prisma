// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Card {
    id              String    @id @default(cuid())
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    isActive        Boolean   @default(true)
    cardName        String    @default("")
    cardDescription String    @default("")
    SetCard         CardSet[]

    @@map("Cards")
}

model Set {
    id             String    @id @default(cuid())
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    isActive       Boolean   @default(true)
    setName        String    @default("")
    setDescription String    @default("")
    defaultSet     Boolean   @default(true)
    setCreatedById String?
    setCreatedBy   User?     @relation(fields: [setCreatedById], references: [id]) // User who created the set.
    SetCard        CardSet[]

    @@map("Sets")
}

model CardSet {
    cardId    String
    card      Card     @relation(fields: [cardId], references: [id])
    setId     String
    set       Set      @relation(fields: [setId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    isActive  Boolean  @default(true)

    @@id([cardId, setId], name: "cardSetId")
    @@map("CardSets")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Set           Set[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
